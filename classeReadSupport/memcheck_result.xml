<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./classic</line>
</preamble>

<pid>33648</pid>
<ppid>19203</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--tool=memcheck</arg>
    <arg>--xtree-memory=full</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=memcheck_result.xml</arg>
  </vargv>
  <argv>
    <exe>./classic</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.033 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10B9AF</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTable(int, int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>205</line>
    </frame>
    <frame>
      <ip>0x10B95A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromList(int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>194</line>
    </frame>
    <frame>
      <ip>0x10F0F6</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>33</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10C3BB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>224</line>
    </frame>
    <frame>
      <ip>0x10AC09</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>62</line>
    </frame>
    <frame>
      <ip>0x10B9BA</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTable(int, int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>206</line>
    </frame>
    <frame>
      <ip>0x10B95A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromList(int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>194</line>
    </frame>
    <frame>
      <ip>0x10F0F6</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>33</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10CBFB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate(double*, unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>353</line>
    </frame>
    <frame>
      <ip>0x10C453</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>230</line>
    </frame>
    <frame>
      <ip>0x10AC09</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>62</line>
    </frame>
    <frame>
      <ip>0x10B9BA</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTable(int, int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>206</line>
    </frame>
    <frame>
      <ip>0x10B95A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromList(int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>194</line>
    </frame>
    <frame>
      <ip>0x10F0F6</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>33</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10B9AF</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTable(int, int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>205</line>
    </frame>
    <frame>
      <ip>0x10F139</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>39</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10C3BB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>224</line>
    </frame>
    <frame>
      <ip>0x10AC09</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>62</line>
    </frame>
    <frame>
      <ip>0x10B9BA</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTable(int, int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>206</line>
    </frame>
    <frame>
      <ip>0x10F139</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>39</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10B739</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTimeTable(int, double, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>155</line>
    </frame>
    <frame>
      <ip>0x10F17A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>44</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10C3BB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>224</line>
    </frame>
    <frame>
      <ip>0x10B364</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTimeTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>130</line>
    </frame>
    <frame>
      <ip>0x10B744</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTimeTable(int, double, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>156</line>
    </frame>
    <frame>
      <ip>0x10F17A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>44</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x10CBFB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate(double*, unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>353</line>
    </frame>
    <frame>
      <ip>0x10C453</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>230</line>
    </frame>
    <frame>
      <ip>0x10B364</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTimeTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>130</line>
    </frame>
    <frame>
      <ip>0x10B744</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTimeTable(int, double, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>156</line>
    </frame>
    <frame>
      <ip>0x10F17A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>44</line>
    </frame>
  </stack>
</error>


<status>
  <state>FINISHED</state>
  <time>00:00:00:01.284 </time>
</status>

<error>
  <unique>0x9</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>72 bytes in 1 blocks are definitely lost in loss record 1 of 3</text>
    <leakedbytes>72</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x4849013</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x10E7DB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>__gnu_cxx::new_allocator&lt;double&gt;::allocate(unsigned long, void const*)</fn>
      <dir>/usr/include/c++/11/ext</dir>
      <file>new_allocator.h</file>
      <line>127</line>
    </frame>
    <frame>
      <ip>0x10E274</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::allocate(std::allocator&lt;double&gt;&amp;, unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>alloc_traits.h</file>
      <line>464</line>
    </frame>
    <frame>
      <ip>0x10D913</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate(unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>346</line>
    </frame>
    <frame>
      <ip>0x10CE9B</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>double* std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;(unsigned long, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>1511</line>
    </frame>
    <frame>
      <ip>0x10C3F1</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>226</line>
    </frame>
    <frame>
      <ip>0x10AC09</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>62</line>
    </frame>
    <frame>
      <ip>0x10B9BA</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTable(int, int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>206</line>
    </frame>
    <frame>
      <ip>0x10B95A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromList(int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>194</line>
    </frame>
    <frame>
      <ip>0x10F0F6</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>33</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>128 bytes in 1 blocks are definitely lost in loss record 2 of 3</text>
    <leakedbytes>128</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x4849013</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x10E7DB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>__gnu_cxx::new_allocator&lt;double&gt;::allocate(unsigned long, void const*)</fn>
      <dir>/usr/include/c++/11/ext</dir>
      <file>new_allocator.h</file>
      <line>127</line>
    </frame>
    <frame>
      <ip>0x10E274</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::allocate(std::allocator&lt;double&gt;&amp;, unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>alloc_traits.h</file>
      <line>464</line>
    </frame>
    <frame>
      <ip>0x10D913</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate(unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>346</line>
    </frame>
    <frame>
      <ip>0x10CE9B</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>double* std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;(unsigned long, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>1511</line>
    </frame>
    <frame>
      <ip>0x10C3F1</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>226</line>
    </frame>
    <frame>
      <ip>0x10AC09</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>62</line>
    </frame>
    <frame>
      <ip>0x10B9BA</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTable(int, int, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>206</line>
    </frame>
    <frame>
      <ip>0x10F139</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>39</line>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>160 bytes in 1 blocks are definitely lost in loss record 3 of 3</text>
    <leakedbytes>160</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x4849013</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x10E7DB</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>__gnu_cxx::new_allocator&lt;double&gt;::allocate(unsigned long, void const*)</fn>
      <dir>/usr/include/c++/11/ext</dir>
      <file>new_allocator.h</file>
      <line>127</line>
    </frame>
    <frame>
      <ip>0x10E274</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::allocate(std::allocator&lt;double&gt;&amp;, unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>alloc_traits.h</file>
      <line>464</line>
    </frame>
    <frame>
      <ip>0x10D913</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate(unsigned long)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>346</line>
    </frame>
    <frame>
      <ip>0x10CE9B</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>double* std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;(unsigned long, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>stl_vector.h</file>
      <line>1511</line>
    </frame>
    <frame>
      <ip>0x10C3F1</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator=(std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;)</fn>
      <dir>/usr/include/c++/11/bits</dir>
      <file>vector.tcc</file>
      <line>226</line>
    </frame>
    <frame>
      <ip>0x10B364</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::readFileTimeTable(int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>130</line>
    </frame>
    <frame>
      <ip>0x10B744</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>CRS::getConstantFromTimeTable(int, double, int)</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>readSupport.cpp</file>
      <line>156</line>
    </frame>
    <frame>
      <ip>0x10F17A</ip>
      <obj>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/classic</obj>
      <fn>main</fn>
      <dir>/home/utente/tesiMagistrale/SOURCESC-/classeReadSupport/.</dir>
      <file>test.cpp</file>
      <line>44</line>
    </frame>
  </stack>
</error>

<errorcounts>
  <pair>
    <count>1</count>
    <unique>0x8</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x7</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x6</unique>
  </pair>
  <pair>
    <count>2</count>
    <unique>0x2</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x4</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x3</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x1</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x0</unique>
  </pair>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

